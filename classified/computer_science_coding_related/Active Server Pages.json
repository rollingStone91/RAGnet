{
  "title": "Active Server Pages",
  "content": "Active Server Pages (ASP) is Microsoft's first server-side scripting language and engine for dynamic web pages.\n\nIt was first released in December 1996, before being superseded in January 2002 by ASP.NET.\n\nHistory \nInitially released as an add-on to Internet Information Services (IIS) via the Windows NT 4.0 Option Pack (1996), it is included as a component of Windows Server (since the initial release of Windows 2000 Server). There have been three versions of ASP, each introduced with different versions of IIS:\n\n ASP 1.0 was released in December 1996 as part of IIS 3.0\n ASP 2.0 was released in September 1997 as part of IIS 4.0\n ASP 3.0 was released in November 2000 as part of IIS 5.0\n\nASP 2.0 provides six built-in objects: Application, ASPError, Request, Response, Server, and Session. Session object, for example, represents a session that maintains the state of variables from page to page. The Active Scripting engine's support of the Component Object Model enables ASP websites to access functionality in compiled libraries such as dynamic-link libraries.\n\nASP 3.0 does not differ greatly from ASP 2.0 but it does offer some additional enhancements such as Server.Transfer method, Server.Execute method, and an enhanced ASPError object. ASP 3.0 also enables buffering by default and optimized the engine for better performance.\n\nASP was supported until 14 January 2020 on Windows 7. The use of ASP pages will be supported on Windows 8 for a minimum of 10 years from the Windows 8 release date. ASP is currently supported in all available versions of IIS.\n\nArchitecture \nASP uses scripting on the server to generate content that is sent to the client's web browser via HTTP response. The ASP interpreter reads and executes all script code between <% and %> tags, the result of which is content generation. These scripts were written using VBScript, JScript, or PerlScript. The @Language directive, the  syntax or server configuration can be used to select the language. In the example below, Response.Write Now() is in an HTML page; it would be dynamically replaced by the current time of the server.\n\nWeb pages with the .asp filename extension use ASP, although some web sites disguise their choice of scripting language for security purposes by using the more common .htm or .html extensions. Pages with the .aspx extension use compiled ASP.NET; however, ASP.NET pages may still include some ASP scripting. The introduction of ASP.NET led to use of the term Classic ASP for the original technology.\n\nSun Java System ASP (formerly ChiliSoft ASP) was a popular and reportedly complete emulator, but it has been discontinued.\n\nThe Server object\nThe server object allows connections to databases (ADO), filesystem, and use of components installed on the server.\n\n<%\nDim oAdoCon, oAdoRec, oAdoStm, oCdoCon, oCdoMsg, oSciDic, oSciFsm, oMswAdr\n\nSet oAdoCon = Server.CreateObject(\"ADODB.Connection\")\nSet oAdoRec = Server.CreateObject(\"ADODB.Recordset\")\nSet oAdoStm = Server.CreateObject(\"ADODB.Stream\")\nSet oCdoCon = Server.CreateObject(\"CDO.Configuration\")\nSet oCdoMsg = Server.CreateObject(\"CDO.Message\")\nSet oSciDic = Server.CreateObject(\"Scripting.Dictionary\")\nSet oSciFsm = Server.CreateObject(\"Scripting.FileSystemObject\")\nSet oMswAdr = Server.CreateObject(\"MSWC.Swingbridge\")\n%>\n\nThe Application object\nThis object stores global variables, which are variables accessible to all users.\n\n<%\nApplication(\"Ali\") = \"My ASP Application\"\nResponse.Write \"Welcome to \" & Server.HTMLEncode(Application(\"Ali\")) & \"!\"\n%>\n\nThe Session object\nStores variables accessible only to a single visitor, which are local variables.\n\n<%\nIf Len(Request.QueryString(\"name\")) > 0 Then\n     Session(\"name\") = Request.QueryString(\"name\") \nEnd If\n\nResponse.Write \"Welcome \" & Server.HTMLEncode(Session(\"name\")) & \"!\"\n%>\n\nThe session object is file based and multiple concurrent read and/or write requests will be blocked and processed in turn.\n\nThe Err object\nAllows the management and fixing of non-fatal errors.\n\n<%\nOn Error Resume Next\n\nResponse.Write 1 / 0 ' Division by zero\n\nIf Err.Number <> 0 Then\n     Response.Write \"Error Code: \" & Server.HTMLEncode(Err.Number) & \"<br />\"\n     Response.Write \"Error Source: \" & Server.HTMLEncode(Err.Source) & \"<br />\"\n     Response.Write \"Error Description: \" & Server.HTMLEncode(Err.Description) & \"<br />\"\n     Err.Clear \nEnd If \n%>\n\nSee also\n ASP.NET\n Template processor\n Comparison of web template engines\n Jakarta Server Pages\n PHP\n Common Gateway Interface\n\nReferences\n\nExternal links\n\n ASP on MSDN\n Microsoft Support for ASP on Windows\n Classic ASP Applications on IIS 7.0 and IIS 7.5 Overview\n Primitive Classic ASP Framework (XML, JSON, BENCODE)\n\nMicrosoft server technology"
}