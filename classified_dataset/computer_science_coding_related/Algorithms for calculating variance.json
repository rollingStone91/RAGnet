{
  "title": "Algorithms for calculating variance",
  "content": "Algorithms for calculating variance play a major role in computational statistics. A key difficulty in the design of good algorithms for this problem is that formulas for the variance may involve sums of squares, which can lead to numerical instability as well as to arithmetic overflow when dealing with large values.\n\nNaïve algorithm\nA formula for calculating the variance of an entire population of size N is:\n\nUsing Bessel's correction to calculate an unbiased estimate of the population variance from a finite sample of n observations, the formula is:\n\nTherefore, a naïve algorithm to calculate the estimated variance is given by the following:\n\n Let \n For each datum :\n \n \n \n \n\nThis algorithm can easily be adapted to compute the variance of a finite population: simply divide by n instead of n − 1 on the last line.\n\nBecause  and  can be very similar numbers, cancellation can lead to the precision of the result to be much less than the inherent precision of the floating-point arithmetic used to perform the computation.  Thus this algorithm should not be used in practice, and several alternate, numerically stable, algorithms have been proposed. This is particularly bad if the standard deviation is small relative to the mean.\n\nComputing shifted data\n\nThe variance is invariant with respect to changes in a location parameter, a property which can be used to avoid the catastrophic cancellation in this formula.\n\nwith  any constant, which leads to the new formula\n\nthe closer  is to the mean value the more accurate the result will be, but just choosing a value inside the\nsamples range will guarantee the desired stability. If the values  are small then there are no problems with the sum of its squares, on the contrary, if they are large it necessarily means that the variance is large as well. In any case the second term in the formula is always smaller than the first one therefore no cancellation may occur.\n\nIf just the first sample is taken as  the algorithm can be written in Python programming language as\n\ndef shifted_data_variance(data):\n    if len(data) < 2:\n        return 0.0\n    K = data[0]\n    n = Ex = Ex2 = 0.0\n    for x in data:\n        n += 1\n        Ex += x - K\n        Ex2 += (x - K) ** 2\n    variance = (Ex2 - Ex**2 / n) / (n - 1)\n    # use n instead of (n-1) if want to compute the exact variance of the given data\n    # use (n-1) if data are samples of a larger population\n    return variance\n\nThis formula also facilitates the incremental computation that can be expressed as\nK = Ex = Ex2 = 0.0\nn = 0\n\ndef add_variable(x):\n    global K, n, Ex, Ex2\n    if n == 0:\n        K = x\n    n += 1\n    Ex += x - K\n    Ex2 += (x - K) ** 2\n\ndef remove_variable(x):\n    global K, n, Ex, Ex2\n    n -= 1\n    Ex -= x - K\n    Ex2 -= (x - K) ** 2\n\ndef get_mean():\n    global K, n, Ex\n    return K + Ex / n\n\ndef get_variance():\n    global n, Ex, Ex2\n    return (Ex2 - Ex**2 / n) / (n - 1)\n\nTwo-pass algorithm\nAn alternative approach, using a different formula for the variance, first computes the sample mean,\n\nand then computes the sum of the squares of the differences from the mean,\n\nwhere s is the standard deviation.  This is given by the following code:\n\ndef two_pass_variance(data):\n    n = len(data)\n    mean = sum(data) / n\n    variance = sum([(x - mean) ** 2 for x in data]) / (n - 1)\n    return variance\n\nThis algorithm is numerically stable if n is small. However, the results of both of these simple algorithms (\"naïve\" and \"two-pass\") can depend inordinately on the ordering of the data and can give poor results for very large data sets due to repeated roundoff error in the accumulation of the sums. Techniques such as compensated summation can be used to combat this error to a degree.\n\nWelford's online algorithm\nIt is often useful to be able to compute the variance in a single pass, inspecting each value  only once; for example, when the data is being collected without enough storage to keep all the values, or when costs of memory access dominate those of computation.  For such an online algorithm, a recurrence relation is required between quantities from which the required statistics can be calculated in a numerically stable fashion.\n\nThe following formulas can be used to update the mean and (estimated) variance of the sequence, for an additional element xn. Here,  denotes the sample mean of the first n samples ,  their biased sample variance, and  their unbiased sample variance.\n\nThese formulas suffer from numerical instability , as they repeatedly subtract a small number from a big number which scales with n. A better quantity for updating is the sum of squares of differences from the current mean, , here denoted :\n\n \n\nThis algorithm was found by Welford, and it has been thoroughly analyzed. It is also common to denote  and .\n\nAn example Python implementation for Welford's algorithm is given below.\n\n# For a new value new_value, compute the new count, new mean, the new M2.\n# mean accumulates the mean of the entire dataset\n# M2 aggregates the squared distance from the mean\n# count aggregates the number of samples seen so far\ndef update(existing_aggregate, new_value):\n    (count, mean, M2) = existing_aggregate\n    count += 1\n    delta = new_value - mean\n    mean += delta / count\n    delta2 = new_value - mean\n    M2 += delta * delta2\n    return (count, mean, M2)\n\n# Retrieve the mean, variance and sample variance from an aggregate\ndef finalize(existing_aggregate):\n    (count, mean, M2) = existing_aggregate\n    if count < 2:\n        return float(\"nan\")\n    else:\n        (mean, variance, sample_variance) = (mean, M2 / count, M2 / (count - 1))\n        return (mean, variance, sample_variance)\n\nThis algorithm is much less prone to loss of precision due to catastrophic cancellation, but might not be as efficient because of the division operation inside the loop.  For a particularly robust two-pass algorithm for computing the variance, one can first compute and subtract an estimate of the mean, and then use this algorithm on the residuals.\n\nThe parallel algorithm below illustrates how to merge multiple sets of statistics calculated online.\n\nWeighted incremental algorithm\nThe algorithm can be extended to handle unequal sample weights, replacing the simple counter n with the sum of weights seen so far.  West (1979) suggests this incremental algorithm:\n\ndef weighted_incremental_variance(data_weight_pairs):\n    w_sum = w_sum2 = mean = S = 0\n\n    for x, w in data_weight_pairs:\n        w_sum = w_sum + w\n        w_sum2 = w_sum2 + w**2\n        mean_old = mean\n        mean = mean_old + (w / w_sum) * (x - mean_old)\n        S = S + w * (x - mean_old) * (x - mean)\n\n    population_variance = S / w_sum\n    # Bessel's correction for weighted samples\n    # Frequency weights\n    sample_frequency_variance = S / (w_sum - 1)\n    # Reliability weights\n    sample_reliability_variance = S / (w_sum - w_sum2 / w_sum)\n\nParallel algorithm\nChan et al. note that Welford's online algorithm detailed above is a special case of an algorithm that works for combining arbitrary sets  and :\n.\nThis may be useful when, for example, multiple processing units may be assigned to discrete parts of the input.\n\nChan's method for estimating the mean is numerically unstable when  and both are large, because the numerical error in  is not scaled down in the way that it is in the  case. In such cases, prefer .\ndef parallel_variance(n_a, avg_a, M2_a, n_b, avg_b, M2_b):\n    n = n_a + n_b\n    delta = avg_b - avg_a\n    M2 = M2_a + M2_b + delta**2 * n_a * n_b / n\n    var_ab = M2 / (n - 1)\n    return var_ab\nThis can be generalized to allow parallelization with AVX, with GPUs, and computer clusters, and to covariance.\n\nExample\nAssume that all floating point operations use standard IEEE 754 double-precision arithmetic. Consider the sample (4, 7, 13, 16) from an infinite population. Based on this sample, the estimated population mean is 10, and the unbiased estimate of population variance is 30.  Both the naïve algorithm and two-pass algorithm compute these values correctly.\n\nNext consider the sample (, , , ), which gives rise to the same estimated variance as the first sample.  The two-pass algorithm computes this variance estimate correctly, but the naïve algorithm returns 29.333333333333332 instead of 30.\n\nWhile this loss of precision may be tolerable and viewed as a minor flaw of the naïve algorithm, further increasing the offset makes the error catastrophic.  Consider the sample (, , , ).  Again the estimated population variance of 30 is computed correctly by the two-pass algorithm, but the naïve algorithm now computes it as −170.66666666666666.  This is a serious problem with naïve algorithm and is due to catastrophic cancellation in the subtraction of two similar numbers at the final stage of the algorithm.\n\nHigher-order statistics\nTerriberry extends Chan's formulae to calculating the third and fourth central moments, needed for example when estimating skewness and kurtosis:\n\nHere the  are again the sums of powers of differences from the mean , giving\n \n\nFor the incremental case (i.e., ), this simplifies to:\n \n\nBy preserving the value , only one division operation is needed and the higher-order statistics can thus be calculated for little incremental cost.\n\nAn example of the online algorithm for kurtosis implemented as described is:\ndef online_kurtosis(data):\n    n = mean = M2 = M3 = M4 = 0\n\n    for x in data:\n        n1 = n\n        n = n + 1\n        delta = x - mean\n        delta_n = delta / n\n        delta_n2 = delta_n**2\n        term1 = delta * delta_n * n1\n        mean = mean + delta_n\n        M4 = M4 + term1 * delta_n2 * (n**2 - 3*n + 3) + 6 * delta_n2 * M2 - 4 * delta_n * M3\n        M3 = M3 + term1 * delta_n * (n - 2) - 3 * delta_n * M2\n        M2 = M2 + term1\n\n    # Note, you may also calculate variance using M2, and skewness using M3\n    # Caution: If all the inputs are the same, M2 will be 0, resulting in a division by 0.\n    kurtosis = (n * M4) / (M2**2) - 3\n    return kurtosis\n\nPébaÿ\nfurther extends these results to arbitrary-order central moments, for the incremental and the pairwise cases, and subsequently Pébaÿ et al.\nfor weighted and compound moments. One can also find there similar formulas for covariance.\n\nChoi and Sweetman\noffer two alternative methods to compute the skewness and kurtosis, each of which can save substantial computer memory requirements and CPU time in certain applications. The first approach is to compute the statistical moments by separating the data into bins and then computing the moments from the geometry of the resulting histogram, which effectively becomes a one-pass algorithm for higher moments. One benefit is that the statistical moment calculations can be carried out to arbitrary accuracy such that the computations can be tuned to the precision of, e.g., the data storage format or the original measurement hardware.  A relative histogram of a random variable can be constructed in the conventional way: the range of potential values is divided into bins and the number of occurrences within each bin are counted and plotted such that the area of each rectangle equals the portion of the sample values within that bin:\n\n \n\nwhere  and  represent the frequency and the relative frequency at bin  and  is the total area of the histogram. After this normalization, the  raw moments and central moments of  can be calculated from the relative histogram:\n\n \n\n \n\nwhere the superscript  indicates the moments are calculated from the histogram. For constant bin width  these two expressions can be simplified using :\n\n \n\n \n\nThe second approach from Choi and Sweetman is an analytical methodology to combine statistical moments from individual segments of a time-history such that the resulting overall moments are those of the complete time-history. This methodology could be used for parallel computation of statistical moments with subsequent combination of those moments, or for combination of statistical moments computed at sequential times.\n\nIf  sets of statistical moments are known:\n for , then each  can\nbe expressed in terms of the equivalent  raw moments:\n\n \n\nwhere  is generally taken to be the duration of the  time-history, or the number of points if  is constant.\n\nThe benefit of expressing the statistical moments in terms of  is that the  sets can be combined by addition, and there is no upper limit on the value of .\n\n \n\nwhere the subscript  represents the concatenated time-history or combined . These combined values of  can then be inversely transformed into raw moments representing the complete concatenated time-history\n\n \n\nKnown relationships between the raw moments () and the central moments ()\nare then used to compute the central moments of the concatenated time-history.  Finally, the statistical moments of the concatenated history are computed from the central moments:\n\nCovariance\nVery similar algorithms can be used to compute the covariance.\n\nNaïve algorithm\nThe naïve algorithm is\n\nFor the algorithm above, one could use the following Python code:\ndef naive_covariance(data1, data2):\n    n = len(data1)\n    sum1 = sum(data1)\n    sum2 = sum(data2)\n    sum12 = sum([i1 * i2 for i1, i2 in zip(data1, data2)])\n\n    covariance = (sum12 - sum1 * sum2 / n) / n\n    return covariance\n\nWith estimate of the mean\nAs for the variance, the covariance of two random variables is also shift-invariant, so given any two constant values  and  it can be written:\n\nand again choosing a value inside the range of values will stabilize the formula against catastrophic cancellation as well as make it more robust against big sums. Taking the first value of each data set, the algorithm can be written as:\n\ndef shifted_data_covariance(data_x, data_y):\n    n = len(data_x)\n    if n < 2:\n        return 0\n    kx = data_x[0]\n    ky = data_y[0]\n    Ex = Ey = Exy = 0\n    for ix, iy in zip(data_x, data_y):\n        Ex += ix - kx\n        Ey += iy - ky\n        Exy += (ix - kx) * (iy - ky)\n    return (Exy - Ex * Ey / n) / n\n\nTwo-pass\nThe two-pass algorithm first computes the sample means, and then the covariance:\n\nThe two-pass algorithm may be written as:\ndef two_pass_covariance(data1, data2):\n    n = len(data1)\n    mean1 = sum(data1) / n\n    mean2 = sum(data2) / n\n\n    covariance = 0\n    for i1, i2 in zip(data1, data2):\n        a = i1 - mean1\n        b = i2 - mean2\n        covariance += a * b / n\n    return covariance\n\nA slightly more accurate compensated version performs the full naive algorithm on the residuals.  The final sums  and  should be zero, but the second pass compensates for any small error.\n\nOnline\n\nA stable one-pass algorithm exists, similar to the online algorithm for computing the variance, that computes co-moment :\n\nThe apparent asymmetry in that last equation is due to the fact that , so both update terms are equal to .  Even greater accuracy can be achieved by first computing the means, then using the stable one-pass algorithm on the residuals.\n\nThus the covariance can be computed as\n\ndef online_covariance(data1, data2):\n    meanx = meany = C = n = 0\n    for x, y in zip(data1, data2):\n        n += 1\n        dx = x - meanx\n        meanx += dx / n\n        meany += (y - meany) / n\n        C += dx * (y - meany)\n\n    population_covar = C / n\n    # Bessel's correction for sample variance\n    sample_covar = C / (n - 1)\n\nA small modification can also be made to compute the weighted covariance:\n\ndef online_weighted_covariance(data1, data2, data3):\n    meanx = meany = 0\n    wsum = wsum2 = 0\n    C = 0\n    for x, y, w in zip(data1, data2, data3):\n        wsum += w\n        wsum2 += w * w\n        dx = x - meanx\n        meanx += (w / wsum) * dx\n        meany += (w / wsum) * (y - meany)\n        C += w * dx * (y - meany)\n\n    population_covar = C / wsum\n    # Bessel's correction for sample variance\n    # Frequency weights\n    sample_frequency_covar = C / (wsum - 1)\n    # Reliability weights\n    sample_reliability_covar = C / (wsum - wsum2 / wsum)\n\nLikewise, there is a formula for combining the covariances of two sets that can be used to parallelize the computation:\n\nWeighted batched version\n\nA version of the weighted online algorithm that does batched updated also exists: let  denote the weights, and write\n\nThe covariance can then be computed as\n\nSee also\nKahan summation algorithm\nSquared deviations from the mean\nYamartino method\n\nReferences\n\nExternal links\n \n\nStatistical algorithms\nStatistical deviation and dispersion\nArticles with example pseudocode\nArticles with example Python (programming language) code"
}